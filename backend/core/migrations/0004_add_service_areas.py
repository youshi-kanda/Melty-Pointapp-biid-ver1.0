# Generated by Django on 2025-10-19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_add_new_settings_models'),  # 既存の最新マイグレーションに依存
    ]

    operations = [
        # サービスエリアテーブルの作成
        migrations.CreateModel(
            name='ServiceArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_code', models.CharField(max_length=20, unique=True, verbose_name='エリアコード')),
                ('area_name', models.CharField(max_length=100, verbose_name='エリア名')),
                ('area_name_en', models.CharField(max_length=100, blank=True, null=True, verbose_name='エリア名(英語)')),
                ('boundary_north', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='北端緯度')),
                ('boundary_south', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='南端緯度')),
                ('boundary_east', models.DecimalField(decimal_places=7, max_digits=11, verbose_name='東端経度')),
                ('boundary_west', models.DecimalField(decimal_places=7, max_digits=11, verbose_name='西端経度')),
                ('center_latitude', models.DecimalField(decimal_places=7, max_digits=10, verbose_name='中心緯度')),
                ('center_longitude', models.DecimalField(decimal_places=7, max_digits=11, verbose_name='中心経度')),
                ('is_active', models.BooleanField(default=True, verbose_name='有効フラグ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': 'サービス提供エリア',
                'verbose_name_plural': 'サービス提供エリア',
                'db_table': 'service_areas',
            },
        ),
        
        # 店舗テーブルに地域情報カラム追加（latitude/longitudeは既存なのでスキップ）
        migrations.AddField(
            model_name='store',
            name='service_area',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.SET_NULL, related_name='area_stores', to='core.ServiceArea', verbose_name='サービスエリア'),
        ),
        migrations.AddField(
            model_name='store',
            name='area_code',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='エリアコード'),
        ),
        migrations.AddField(
            model_name='store',
            name='prefecture',
            field=models.CharField(default='大阪府', max_length=50, verbose_name='都道府県'),
        ),
        migrations.AddField(
            model_name='store',
            name='city',
            field=models.CharField(default='大阪市', max_length=50, verbose_name='市区町村'),
        ),
        migrations.AddField(
            model_name='store',
            name='district',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='区'),
        ),
        migrations.AddField(
            model_name='store',
            name='is_area_verified',
            field=models.BooleanField(default=False, verbose_name='エリア検証済み'),
        ),
        
        # 初期データ投入
        migrations.RunPython(
            code=lambda apps, schema_editor: insert_initial_areas(apps, schema_editor),
            reverse_code=migrations.RunPython.noop,
        ),
    ]


def insert_initial_areas(apps, schema_editor):
    """初期サービスエリアデータを投入"""
    ServiceArea = apps.get_model('core', 'ServiceArea')
    
    # ミナミエリア
    ServiceArea.objects.create(
        area_code='minami',
        area_name='ミナミ',
        area_name_en='Minami',
        boundary_north=34.6750,
        boundary_south=34.6600,
        boundary_east=135.5050,
        boundary_west=135.4950,
        center_latitude=34.6675,
        center_longitude=135.5000,
        is_active=True
    )
    
    # 北新地エリア
    ServiceArea.objects.create(
        area_code='kitashinchi',
        area_name='北新地',
        area_name_en='Kitashinchi',
        boundary_north=34.7000,
        boundary_south=34.6930,
        boundary_east=135.5000,
        boundary_west=135.4920,
        center_latitude=34.6965,
        center_longitude=135.4960,
        is_active=True
    )
