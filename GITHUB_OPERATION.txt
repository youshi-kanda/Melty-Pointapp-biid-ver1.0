GitHub運用仕様書
1. 汎用版（どのプロジェクトでも使える基本ルール）
リポジトリ運用ルール

1人開発前提

main ブランチは「テスト済み・安定版」のみを置く。

開発中は feature ブランチを切って作業。

作業が終わったら main にマージ。

リポジトリ公開範囲

AIエージェントと連携する場合 → Public に設定。

個人開発かつ秘匿性が必要なら Private でも可。

バックアップとしてのGitHub

ローカルで作業 → git push origin <branch> でリモート保存。

万一PCが壊れてもGitHubから復元できる。

ブランチ運用例

main … 本番デプロイ用（常に安定版）

dev … 開発・動作確認用

feature/* … 個別機能開発用

例：

# 新しい機能追加
git checkout -b feature/add-payment
# コード修正後
git commit -m "Add payment feature"
git push origin feature/add-payment

2. biid-pointapp プロジェクト専用版
リポジトリ情報

リポジトリ名: biid-pointapp-salute

URL: https://github.com/youshi-kanda/biid-pointapp-salute.git

ローカルパス: /Users/youshi/Desktop/projects/biid/melty-pointapp/biid-pointapp-salute

サブプロジェクト構成

このプロジェクトには以下の4つの画面・機能が存在する：

ユーザー画面

会員登録、ログイン、ポイント残高確認、ギフト交換など

API連携: 会員登録/更新/削除

店舗管理画面

ポイント発行、決済、領収書発行、チャージ履歴

残高不足時の自動発行停止

運営管理画面

店舗別決済金額一覧、会員利用状況確認、リベート算出

デジタルギフト発行・交換管理

店舗用決済端末画面

QR決済開始・結果表示

GMO決済モック・本番切替

ブランチ運用ポリシー（専用）

main

Cloudflare Pages へ自動デプロイ

クライアント提出用の安定版を置く

dev

デモ・モック検証用

AIエージェントとの連携確認用

feature/user-app

ユーザー画面専用開発

feature/store-admin

店舗管理画面専用開発

feature/ops-admin

運営管理画面専用開発

feature/terminal

決済端末用画面

Push & Deploy フロー

開発ブランチで作業

git checkout -b feature/terminal
# 作業...
git add .
git commit -m "Implement QR payment flow"
git push origin feature/terminal


テストが済んだら PR を作成して dev へマージ

dev が安定したら main にマージ

GitHub Actions または Cloudflare Pages の設定で main に push → 自動デプロイ

成功条件（モックデモ時）

Console から Invariant エラーが消える

Unmocked API intercepted が出ない

/api/core/payments/ が 200/201 JSON を返す

支払いフローが成功/キャンセルまで通る

Unexpected token '<' が出ない